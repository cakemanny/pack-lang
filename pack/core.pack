(ns pack.core)
(import builtins)
(import operator)
(import pack.interp)

(def *compile* false)

(def eval (. pack.interp rt_eval))
(def apply (. pack.interp rt_apply))

;; Logic
(def not (fn [x] (if x false true)))

;; Arithmatic
(def + (. operator add))
(def - (. operator sub))
(def * (. operator mul))
(def / (. operator truediv))
(def = (. operator eq))
(def < (. operator lt))
(def <= (. operator le))
(def > (. operator gt))
(def >= (. operator ge))
(def even? (fn [n] (not ((. operator and_) n 1))))
(def odd? (fn [n] (not (even? n))))


(def symbol? (fn [s] ((. builtins isinstance) s (. pack.interp Sym))))

;; Data structures
(def list (fn [& elems] elems))
(def list? (fn [xs] ((. builtins isinstance) xs (. pack.interp List))))
(def cons (. pack.interp Cons))

(def vector (fn [& elems] ((. (. pack.interp Vec) from_iter) elems)))
(def vector? (fn [xs] ((. builtins isinstance) xs (. pack.interp Vec))))
(def subvec (fn [xs & start_and_stop] (apply (. xs subvec) start_and_stop)))
(def hash-map
  (fn [& elems]
    (let* [kvs ((. pack.interp take_pairs) elems)
           map-from-entries (. (. pack.interp Map) from_iter)]
       (map-from-entries kvs))))

(def assoc
  (fn [m k v]
    (if m
      ((. m assoc) k v)
      {k v})))


(def first (fn [xs] (. xs hd)))
(def rest (fn [xs] (. xs tl)))

(def foldl
  (fn foldl [func accum lst]
    (if (not lst)
      accum
      (recur func (func accum (first lst)) (rest lst)))))

; This will stack overflow quite quickly
(def foldr
  (fn foldr [func end lst]
    (if (not lst)
      end
      (func (first lst) (foldr func end (rest lst))))))

;; concat
; foldl with + would be very inefficient due to + being linear in the
; first argument
; usually this would be solved by using foldr - but then we end up consuming
; the call stack.
; so, instead we stick items onto the result in reverse order and then reverse
; essentially using the list as the stack instead of the call stack
(def concat
  (fn concat [& elems]
    (let* [rev-plus (fn [xs ys] (+ ys xs))
           rev (. builtins reversed)]
     (rev (foldl rev-plus '() elems)))))

;;
;; Now, from this point on, we have enough machinery to use syntax-quote
;;

(def map
  (fn map [f xs]
    (let* [fcons
           (fn [x ys]
             (cons (f x) ys))]
      (foldr fcons '() xs))))

;; this could be more efficient by converting parts to be a lazy seq
(def str
  (fn str [& parts]
    (foldl + "" (map (. builtins str) parts))))


;; FIXME: this needs to failover to a fold when the darn thing is iterable
(def count
  (fn [xs]
    ((. builtins len) xs)))


(def meta
  (fn [x]
    (. x metadata)))

;; Namespace functions
(def ns
  (fn [ns-sym]
    (list 'do
          `(in-ns '~ns-sym)
          (list `refer ''pack.core))))
((. pack.interp set_macro) (var ns))


;; Enhance basic forms

(def destructure
  (fn [bindings]
    (if (not (vector? bindings))
      (raise ((. builtins SyntaxError) (str "bindings not vector: " bindings)))
      (if (odd? (count bindings))
        (raise ((. builtins SyntaxError) (str "odd number of bindings: " bindings)))
        (let* [aux (fn [lhs rhs]
                     (if (symbol? lhs)
                       [lhs rhs]
                       (raise ((. builtins NotImplementedError) "TODO: destructure"))))]
         (loop [result []
                bs bindings]
           (if (= (count bs) 0)
             result
             (recur
               (+ result (aux (bs 0) (bs 1)))
               (subvec bs 2)))))))))

(def defn
  (fn [name bindings body]
    `(def ~name (fn ~name ~bindings ~body))))
((. pack.interp set_macro) (var defn))


(defn defmacro [name bindings body]
  `(do
     (defn ~name ~bindings ~body)
     ((. pack.interp set_macro) (var ~name))))
((. pack.interp set_macro) (var defmacro))


(defmacro let [bindings & body]
  (let* [destructured (destructure bindings)]
    `(let* ~destructured ~@body)))


;; vim:ft=clojure:
